child: FutureBuilder(
  future: rootBundle.load('assets/images/cat.1501.jpg'),
  builder: (context, snapshot) {
    if (snapshot.connectionState == ConnectionState.done) {
      final imageData = snapshot.data;
      if (imageData != null) {
        img.Image? my_image = img.copyResize(
            img.decodeImage(
              imageData.buffer.asUint8List(),
            )!,
            width: 180,
            height: 180);
        if (my_image != null) {
          return Image.memory(img.encodeJpg(my_image));
        }
        return const Text('Failed to decode data');
      }
      return const Text('Failed to load data');
    }
    return const Text('Loading');
  },
),



void _convertImage() async {
  ByteData imageData = await rootBundle.load('assets/images/cat.1501.jpg');
  img.Image? my_image = img.decodeImage(imageData.buffer.asUint8List())!;
  if (my_image.isNotEmpty) {
    final jpgImage = img.encodePng(my_image);
    final prediction = Prediction(
      id: ref.read(cuidServiceProvider).newCuid(),
      prediction: Prediction.cat,
      confidence: 99,
      image: jpgImage,
    );
    prediction.saveLocal();
    if (mounted) {
      await Navigator.of(context).push(MaterialPageRoute(
        builder: (BuildContext context) {
          return PredictionDetailsPage(
            prediction: prediction,
          );
        },
      ));
    }
    print('created:  ${prediction.id}');
  }
}

void _predictAll() async {
  final arrNums = <String>[];
  for (int i = 0; i <= 10; i++) {
    arrNums.add(i.toString().padLeft(2, '0'));
  }
  final files = <String>[
    ...arrNums.map((num) => 'assets/images/cat.15$num.jpg'),
    ...arrNums.map((num) => 'assets/images/dog.15$num.jpg'),
    ...arrNums.getRange(1, 7).map((num) => 'assets/images/cat.$num.jpg'),
  ];
  for (String fileName in files) {
    await _predictImage(fileName);
  }
}
